plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://jitpack.io/" }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {

    //// Required Dependencies ////

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "com.github.thedeathlycow:thermoo:v${project.thermoo_version}"

    //// Optional Dependencies ////
    modCompileOnly("maven.modrinth:colorful-hearts:${project.colorful_hearts_version}") { transitive = false }


    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}"
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"

    // Trinkets https://github.com/emilyploszaj/trinkets
    modCompileOnlyApi("dev.emi:trinkets:${project.trinkets_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.mockito:mockito-core:3.+"

    //// Bring depends into testmod ////

    afterEvaluate {
        subprojects.each {
            api project(path: ":${it.name}", configuration: "namedElements")

            if (!(it.name in devOnlyModules)) {
                include project("${it.name}:")
            }

            testmodImplementation project("${it.name}:").sourceSets.testmod.output
        }

        testmodImplementation "org.mockito:mockito-core:3.+"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.21 upwards uses Java 21.
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    splitEnvironmentSourceSets()
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += client.compileClasspath
        runtimeClasspath += client.runtimeClasspath
    }
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }

    testmodClient {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += client.compileClasspath
        runtimeClasspath += client.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
        compileClasspath += client.output
        runtimeClasspath += client.output

        compileClasspath += testmod.compileClasspath
        runtimeClasspath += testmod.runtimeClasspath
        compileClasspath += testmod.output
        runtimeClasspath += testmod.output
    }
}

subprojects {
    dependencies {
        testmodImplementation sourceSets.main.output
        testmodImplementation project(path: ':', configuration: 'namedElements')
    }
}

loom {
    mods {
        "frostiful" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }

        "frostiful-test" {
            sourceSet sourceSets.testmod
            sourceSet sourceSets.testmodClient
        }
    }

    accessWidenerPath = file("src/main/resources/frostiful.accesswidener")
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmodClient
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
        gametest {
            inherit testmodServer

            name "Game Test"

            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "build/gametest"
        }
        updateStructures {
            server()
            name = "Update Structures"

            vmArg("-Dfrostiful.update-structures")
            runDir "run/structure_update"
        }
    }
}

test {
    useJUnitPlatform()
}

fabricApi {
    configureDataGeneration() {
        createSourceSet = true
        modId = "frostiful-datagen"
        client = true
    }
}

publishMods {
    changelog = file("changelogs/${mod_version}.md").text
    type = STABLE

    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)
    displayName = "Frostiful ${mod_version}"

    modLoaders.add("fabric")
    modLoaders.add("quilt")

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        projectId = "715248"
        minecraftVersions.addAll("1.21.4")

        javaVersions.add(JavaVersion.VERSION_21)

        clientRequired = true
        serverRequired = true

        requires("fabric-api", "cardinal-components-api", "thermoo", "cloth-config")

        optional("thermoo-patches", "scorchful", "modmenu")
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "Ae6qoBj3"
        minecraftVersions.addAll("1.21.4")

        requires("fabric-api", "cardinal-components-api", "thermoo", "cloth-config")

        optional("thermoo-patches", "scorchful", "modmenu")
    }
}
